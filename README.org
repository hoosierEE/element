* Element
What: a dialect of K using CPU or GPU based on run-time data.

Why: fun?

How: CUDA/C++

Dream: fast kernel DSL language embedded in a distributed system.

** k crash course
K is a vector language descended from APL, with hints of lisp.

#+begin_src k
 -1_(+9(|+\)\1 1)1        /first 9 fibonacci numbers
1 1 2 3 5 8 13 21 34
 (-1_(+9(|+\)\1 1)1)      /same
 {-1_(+9(|+\)\1 1)1}[]    /same, as a function
 {-1_(+x(|+\)\1 1)1}[9]   /paramaterized
 f:{-1_(+x(|+\)\1 1)1}[9] /saved as f
 f'2 8 9                  /f each 2 8 9
(1 1
 1 1 2 3 5 8 13 21
 1 1 2 3 5 8 13 21 34)
#+end_src

** typical K features
Most Ks have:
- an interpreter
- dynamic typing
- eager evaluation
- simple scoping rules (global or local variables, no lexical scoping)
- basic interaction with the host system
  + =\cd= to change directory without leaving the interpreter
  + run commands through =/bin/sh= such as =\ls=, =\pwd=
  + built-in file and socket I/O
- a method for loading/executing other K scripts
- a handful of basic types: int, float, char, symbol, list, dict, function
- no user-defined types
- arithmetic operations defined for single values as well as collections =1+2 0 3= is =3 1 4=
- structural operations on collections
- right-to-left evaluation and no operator precedence: =2*3+4= is =2*(3+4)=
- partial application or "projections" instead of closures: ={x+y+z}[1;;3]= is ={1+x+3}=

** Element quirks
Element diverges from "typical K":
- implicit hardware acceleration by default
  + small data processed on one CPU
  + larger or large and irregular data processed on multiple CPUs
  + really large and regular data processed on GPU
- lexical scope
- closures
- =\cd=, =\d=, =\l file.k= etc. provided by REPL, not runtime
- string data type (distinct from "list of char")
- =x::y= declare mutable, change =mut::1; mut::2 /okay=
- =x:y= declare immutable =imm:1; imm::2 /error=
- =>s= open
  #+begin_src k
  fd:>`"/path/to/file.txt"
  #+end_src
- =<s= close =<fd=

* Install
Compile for GPU with NVIDIA's =nvcc= compiler:
#+begin_src bash
cd element/src && make
./element
#+end_src

Or for CPU with =g++=:
#+begin_src bash
CPU=1 cd element && make
./element
#+end_src

* Development
This project is in the *experimental*, pre-alpha stage.
Some [[https://github.com/doctest/doctest/tree/master/doc/markdown#reference][doctest]] tests exist, but no coverage goals yet.

Why the name "Element"?
- chemistry puns: K is potassium, CUDA (Cu) is copper
- vector languages deal with "elements of a vector" frequently
- naming is hard

