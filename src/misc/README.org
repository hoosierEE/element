* Python Prototype
This folder contains experiments used to guide Element development.
Currently the focus is on an Element interpreter, written in Python to prioritize quick iteration over run-time performance.

** Scanner.py
This breaks an input string into a list.
Most list elements are strings, but some are lists of strings representing lists in the source.
- ='2+3'= ⇒ =['2', '+', '3']=
- ='1 2+3 4'= ⇒ =[['1', '2'], '+', ['3', '4']]=
- ='2+`a`b``c'= ⇒ =['2', '+', ['`a', '`b', '`', '`c']]=
In particular, the scanner recognizes /stranding/ of certain kinds of values:
- symbols like =`a= or =`=
- strings like ="hi world"= or =""=
- numbers like =1= or =3.1415=
Numbers can strand together when separated by only spaces, while strings and symbols may strand together without spaces.
For example two strings like ="hi""world"= would strand as the list =["hi","world"]=.

** Ast.py
The Ast class defines an Ast node and its pretty-printer.
An Ast is a =node= with zero or more additional nodes as its =children=.

** Parser.py
This parser is a bottom-up style parser originally inspired by [[the Double-E method]].
However since K operators have uniform precedence the design diverged.
A large portion of its logic deals with juxtaposition, projection, and composition within the context of the usual application of values to operators, function calls, and parentheses.
- juxtaposition
  + =a b c= ⇒ =(a (b c))=
  + =()()= ⇒ =((lst NIL) (lst NIL))=
  + =f[x][y]= ⇒ =((f (prg x)) (prg y))=
  + =a 2-b 3= ⇒ =(a (- 2 (b 3)))=
- projection
  + =2+= ⇒ =(prj + 2)=
  + =("a",)= ⇒ =(prj , "a")=
- composition
  + =+-= ⇒ =(cmp + (prj -))= (note that this composition ends with a 1-argument =prj=)
  + =a+*b-= ⇒ =(cmp (prj + a) (cmp * (prj - b)))=
- normal application
  + =a+*b-1= ⇒ =(+ a (* (- b 1)))=
  + =+-^a= ⇒ =(+ (- (^ a)))=
The parser makes no attempt to validate data types.

** unit_test.py
This file aims to include unit tests for the major parts of the prototype.
Currently it has about 100 parser tests comparing a string input with corresponding Ast output.
