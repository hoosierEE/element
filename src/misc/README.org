* Python Prototype
This folder contains experiments used to guide Element development.
Currently the focus is on an Element interpreter, written in Python to prioritize quick iteration over run-time performance.

** Scanner.py
This breaks an input string into a list.
Most list elements are strings, but some are lists of strings representing lists in the source.
- =2+3= ⇒ =['2', '+', '3']=
- =1 2+3 4= ⇒ =[['1', '2'], '+', ['3', '4']]=
- =2+`a`b``c= ⇒ =['2', '+', ['`a', '`b', '`', '`c']]=
In particular, the scanner recognizes /stranding/ of certain kinds of values:
- symbols like =`a= or =`=
- strings like "hi world" or "x"
- numbers like =1= or =3.1415=
Numbers form strands when separated by spaces, while strings and symbols may strand together without spaces.
Stranding two strings without spaces as in "hi""world" results in the list =["hi","world"]=.
The /strand/ concept in array languages is simply a minimal syntax for creating 1-dimensional lists.
Creating nested list literals requires parentheses as in =(1;(2;3);4)=.

** Ast.py
The =Ast= class defines an abstract syntax tree (AST) node and its pretty-printer.
An =Ast= node has a name and zero or more additional nodes as its =children=.

** Parser.py
This parser is a bottom-up style parser originally inspired by [[the Double-E method]].
After a while I removed the operator precedence logic from this parser since K operators have uniform precedence.
A large portion of this parser now deals with juxtaposition, projection, and composition within the context of the usual application of values to operators, function calls, and parentheses.
- juxtaposition (implied application)
  + =a b c= ⇒ =(a (b c))=
  + =()()= ⇒ =((lst NIL) (lst NIL))=
  + =f[x][y]= ⇒ =((f (prg x)) (prg y))=
  + =a 2-b 3= ⇒ =(a (- 2 (b 3)))=
- projection (partial application)
  + =2+= ⇒ =(prj + 2)=
  + ="a",= ⇒ =(prj , "a")=
- composition
  + =+-= ⇒ =(cmp + (prj -))= (note =-= treated as a partial application with both arguments missing)
  + =a+*b-= ⇒ =(cmp (prj + a) (cmp * (prj - b)))=
- infix and prefix application
  + =a+*b-1= ⇒ =(+ a (* (- b 1)))=
  + =+-^a= ⇒ =(+ (- (^ a)))=
The job of the parser is to disambiguate the number of arguments to operators.
For example =+2*b-= contains 3 operators ("+", "*", and "-"), each of which has either a unary/prefix meaning or a binary/infix meaning depending on context.
However, the above results in the AST =(cmp + (cmp (prj * 2) (prj - b)))= because the "rule" is that a trailing operator is infix, and so we can recognize the suffix =b-= as a projection =(prj - b)=.
From there we work backward and see =*=, which is infix because it has a left operand =2=, resulting in another projection =(prj * 2)=.

The goal of the parser in this situation is to preserve the fact that =-= is missing an argument, so any time a =prj= node is composed with other operators, the parent node becomes a composition.
These two projections form a composition, and finally the leading =+= must be a prefix operator because it has no left argument.
Again we preserve the partial application information by making the root node a =cmp=.

One thing the parser does not do is validate the shape or type of arguments to operands.
For example ="ab"/3= is an invalid expression in the language but parses as =((fld "ab") 3)=.
The evaluator will handle this task.

** Eval.py
TODO

** unit_test.py
This file aims to include unit tests for the major parts of the prototype.
Currently it has about 100 parser tests comparing a string input with expected Ast output.
